---
# Ansible playbook that obtains an SSL certificate from Let's Encrypt
# and installs it on a NearlyFreeSpeech.net site.
#
# Suggested ansible.cfg settings to have in your current working directory:
#     retry_files_enabled = False
#     inventory = hosts
#     control_path = %(directory)s/%%C
#
# Write your hosts file like the following:
#     nfsn ansible_host=<your_nearlyfreespeech_ssh_hostname> \
#          ansible_user=<your_nearlyfreespeech_user> \
#          ansible_python_interpreter=/usr/local/bin/python
#
# References:
#   http://docs.ansible.com/ansible/letsencrypt_module.html
#   https://github.com/abl/letsencrypt-nfsn
#   https://members.nearlyfreespeech.net/faq?q=TLSSetup#TLSSetup
#
# Copyright Â© 2016 Alexandre de Verteuil
# Freely copyable, modifiable and shareable

- hosts: nfsn
  gather_facts: no  # The setup module doesn't work in NearlyFreeSpeech.net's environment.
  tasks:

  - name: create the account key
    delegate_to: localhost
    shell: openssl genrsa 4096 > {{ work_dir }}/{{ account_key_file }}
    args:
      creates: "{{ work_dir }}/{{ account_key_file }}"

  - name: fix the permissions on the account key
    delegate_to: localhost
    file:
      path: "{{ work_dir }}/{{ account_key_file }}"
      mode: 0600

  - name: generate the domain key
    delegate_to: localhost
    shell: openssl genrsa 4096 > {{ domain_key_file }}
    args:
      creates: "{{ domain_key_file }}"

  - name: fix the permissions on the domain key
    delegate_to: localhost
    file:
      path: "{{ work_dir }}/{{ account_key_file }}"
      mode: 0600

  - name: create csr
    delegate_to: localhost
    shell: 'openssl req -new -sha256 -key {{ domain_key_file }} -subj "/" -reqexts SAN -config <(cat {{ openssl_default_config }} <(printf "[SAN]\nsubjectAltName={% for name in domains %}DNS:{{ name }}{% if not loop.last %},{% endif %}{% endfor %}")) > {{ work_dir }}/{{ csr_file }}'
    args:
      creates: "{{ work_dir }}/{{ csr_file }}"
      executable: /bin/bash

  - name: prepare the .well-known/acme-challenge directory
    file:
      path: /home/public/.well-known/acme-challenge
      state: directory
      mode: 0775

  - name: get challenge
    delegate_to: localhost
    letsencrypt:
      acme_directory: "{{ acme_directory }}"
      account_email: "{{ account_email }}"
      account_key: "{{ account_key_file }}"
      agreement: "{{ agreement_url }}"
      csr: "{{ work_dir }}/{{ csr_file }}"
      dest: "{{ work_dir }}/{{ cert_file }}"
    register: le_challenge

  - name: fulfill the challenge
    copy:
      dest: "/home/public/{{ item.value['http-01']['resource'] }}"
      content: "{{ item.value['http-01']['resource_value'] }}"
    with_dict: "{{ le_challenge['challenge_data']|default({}) }}"

  - name: test the challenge validation locally
    delegate_to: localhost
    command: curl -skL http://{{ item.key }}/{{ item.value['http-01']['resource'] }}
    register: value
    failed_when: "value.stdout != item.value['http-01']['resource_value']"
    changed_when: false
    with_dict: "{{ le_challenge['challenge_data']|default({}) }}"

  - name: obtain the certificate
    delegate_to: localhost
    letsencrypt:
      acme_directory: "{{ acme_directory }}"
      account_email: "{{ account_email }}"
      account_key: "{{ account_key_file }}"
      agreement: "{{ agreement_url }}"
      csr: "{{ work_dir }}/{{ csr_file }}"
      dest: "{{ work_dir }}/{{ cert_file }}"
      data: "{{ le_challenge }}"

  - name: clean up the challenge token
    file:
      path: /home/public/{{ item.value['http-01']['resource'] }}
      state: absent
    with_dict: "{{ le_challenge['challenge_data']|default({}) }}"

  - name: copy the certificate to the server
    copy:
      src: "{{ work_dir }}/{{ cert_file }}"
      dest: /home/protected/{{ cert_file }}
    register: copy_cert

  - name: copy the private key to the server
    copy:
      src: "{{ work_dir }}/{{ domain_key_file }}"
      dest: /home/protected/{{ domain_key_file }}
      mode: 0640
      group: web
    register: copy_key

  - name: download the intermediate SSL certificate
    get_url:
      url: https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem
      dest: /home/protected/intermediary.pem
    register: copy_chain

  - name: install the certificate
    shell: cd /home/protected; cat {{ domain_key_file }} intermediary.pem {{ cert_file }} \
           | nfsn -i set-tls
    register: nfsn
    failed_when: '"ERROR" in nfsn.stdout'
    when: le_challenge|changed or copy_cert|changed or copy_key|changed or copy_chain|changed

  vars:
    work_dir:
    account_email:
    account_key_file: account.key
    domain_key_file: domain.key
    csr_file: domain.csr
    cert_file: domain.crt
    domains: []
    openssl_default_config: /etc/pki/tls/openssl.cnf
    #openssl_default_config: /etc/ssl/openssl.cnf
    agreement_url: https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf
    acme_directory: https://acme-staging.api.letsencrypt.org/directory
    #acme_directory: https://acme-v01.api.letsencrypt.org/directory
